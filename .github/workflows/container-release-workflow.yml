name: Container Release Workflow

on:
  workflow_call:
    inputs:
      gh_repository_owner:
        required: true
        type: string
      gh_event_name:
        required: true
        type: string
      gh_ref:
        required: true
        type: string
      registry:
        required: true
        type: string
      image_repo_tag:
        description: "The full container image repository and tag (e.g., quay.io/ortelius/ms-sbom-export:main-v10.0.715-gfcefa2)"
        required: true
        type: string
      loaddata:
        required: false
        type: boolean
        default: false
      gh_handle:
        required: false
        type: string
        default: ""
    secrets:
      QUAY_USERID:
        required: true
      QUAY_PASSWORD:
        required: true
      gh_token:
        required: false
    outputs:
      digest:
        description: "The digest of the final multi-platform manifest."
        value: ${{ jobs.release.outputs.digest }}

jobs:
  build:
    if: ${{ inputs.gh_repository_owner == 'ortelius' && inputs.gh_event_name == 'push' && inputs.gh_ref == 'refs/heads/main' }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            runner: ubuntu-latest
            arch: amd64
          - platform: linux/arm64
            runner: ubuntu-24.04-arm
            arch: arm64
    runs-on: ${{ matrix.runner }}
    env:
      ARCH: ${{ matrix.arch }}

    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3
        with:
          version: v0.14.0

      - name: Login to Quay
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.QUAY_USERID }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Determine Temporary Tag
        id: prep_tag
        run: |
          IMAGE_REPO=$(echo "${{ inputs.image_repo_tag }}" | awk -F: '{print $1}')
          TEMP_TAG="${IMAGE_REPO}:latest-${{ env.ARCH }}"
          echo "TEMP_TAG=${TEMP_TAG}" >> $GITHUB_ENV

      - name: Cache Data File
        uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4
        id: cache
        with:
          path: |
            mitre.joblib
          key: ${{ runner.os }}-${{ hashFiles('*.json') }}

      - name: Setup Python
        if: ${{ inputs.loaddata && steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5
        with:
          python-version: 3.11

      - name: Install Python Dependencies
        if: ${{ inputs.loaddata && steps.cache.outputs.cache-hit != 'true' }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.in

      - name: Generate Data File
        if: ${{ inputs.loaddata && steps.cache.outputs.cache-hit != 'true' }}
        run: |
          python main.py --loaddata

      - name: Build and Push Docker Image for ${{ env.ARCH }}
        id: build_and_push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          context: .
          push: true
          load: true
          tags: ${{ env.TEMP_TAG }}
          platforms: ${{ matrix.platform }}
        timeout-minutes: 100
  release:
    needs: build
    if: ${{ inputs.gh_repository_owner == 'ortelius' && inputs.gh_event_name == 'push' && inputs.gh_ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    outputs:
      digest: ${{ steps.manifest.outputs.digest }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0

      - name: Install Cosign
        uses: sigstore/cosign-installer@d58896d6a1865668819e1d91763c7751a165e159 # v3.9.2

      - name: Login to Quay
        uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ secrets.QUAY_USERID }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Determine Repository Name
        run: |
          IMAGE_REPO=$(echo "${{ inputs.image_repo_tag }}" | awk -F: '{print $1}')
          echo "IMAGE_REPO=${IMAGE_REPO}" >> $GITHUB_ENV

      # Updated step to use digests instead of tags
      - name: Create and Push Manifest
        id: manifest
        run: |
          AMD64_DIGEST=$(docker manifest inspect ${{ env.IMAGE_REPO }}:latest-amd64 | jq -r '.manifests[0].digest')
          ARM64_DIGEST=$(docker manifest inspect ${{ env.IMAGE_REPO }}:latest-arm64 | jq -r '.manifests[0].digest')

          echo "Found AMD64 Digest: ${AMD64_DIGEST}"
          echo "Found ARM64 Digest: ${ARM64_DIGEST}"

          # Create the manifest using the immutable digests
          docker manifest create ${{ inputs.image_repo_tag }} \
            "${{ env.IMAGE_REPO }}@${AMD64_DIGEST}" \
            "${{ env.IMAGE_REPO }}@${ARM64_DIGEST}"

          MANIFEST_DIGEST=$(docker manifest push ${{ inputs.image_repo_tag }})
          echo "digest=${MANIFEST_DIGEST}" >> $GITHUB_OUTPUT

      - name: Run Trivy in GitHub SBOM mode and submit results to Dependency Graph
        uses: aquasecurity/trivy-action@f9424c10c36e288d5fa79bd3dfd1aeb2d6eae808 # 0.33.0
        with:
          scan-type: 'image'
          format: 'cyclonedx'
          output: 'sbom.cyclonedx.json'
          image-ref: ${{ inputs.image_repo_tag }}@${{ steps.manifest.outputs.digest }}
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: Attest SBOM
        run: |
          cosign attest --yes --predicate sbom.cyclonedx.json --type cyclonedx ${{ inputs.image_repo_tag }}@${{ steps.manifest.outputs.digest }}

      - name: Sign the images
        run: |
          cosign sign --yes ${{ inputs.image_repo_tag }}@${{ steps.manifest.outputs.digest }}

      - name: Verify the pushed tags
        run: |
          cosign verify ${{ inputs.image_repo_tag }}@${{ steps.manifest.outputs.digest }} --certificate-identity-regexp 'https://github\.com/ortelius/workflow-toolkit/\.github/workflows/.+' --certificate-oidc-issuer 'https://token.actions.githubusercontent.com' | jq "."

      - name: Swagger
        if: ${{ env.GH_TOKEN != '' }}
        env:
          GH_TOKEN: ${{ secrets.gh_token }}
        run: |
          if [ -f "main.py" ] && grep -q '\[Discord\]' README.md; then
            git config user.name "${{ inputs.gh_handle }}"
            git config user.email "${{ inputs.gh_handle }}@users.noreply.github.com"
            npm install -g openapi-to-md
            docker run --name swagger -p 8080:8080 --rm -d "${{ inputs.image_repo_tag }}"
            sleep 5
            wget http://localhost:8080/openapi.json -O openapi.json
            docker stop swagger
            sed -i.bak "/\[Discord\]/q" README.md && openapi-to-md openapi.json | tail -n +2 >> README.md && rm README.md.bak
            git pull
            git add .
            git commit -m "docs: auto-update swagger documentation" || true
            git push
          fi
