name: Helm Release Workflow

on:
  workflow_call:
    inputs:
      gh_repository_owner:
        required: true
        type: string
      gh_event_name:
        required: true
        type: string
      gh_ref:
        required: true
        type: string
      gh_handle:
        required: true
        type: string
      dhurl:
        required: false
        type: string
        default: ""
      chart:
        required: true
        type: string
      chart_version:
        required: false
        type: string
      image_repository:
        required: false
        type: string
      image_tag:
        required: false
        type: string
      image_digest:
        required: false
        type: string
      notes:
        required: false
        type: string
        default: ""
    secrets:
      GPG_KEYRING_BASE64:
        required: true
      GPG_PASSPHRASE:
        required: true
      GPG_KEY:
        required: true
      gh_token:
        required: true
      DHPASS:
        required: false
      DHUSER:
        required: false

jobs:
  helm:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    if: ${{ inputs.gh_repository_owner == 'ortelius' && inputs.gh_ref == 'refs/heads/main' }}
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Checkout
        id: checkout
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.1

      - name: Configure Git
        id: git
        run: |
          git config user.name "${{ inputs.gh_handle }}"
          git config user.email "${{ inputs.gh_handle }}@users.noreply.github.com"
        shell: bash

      - name: Get all branches
        id: branches
        run: |
          git pull --all; for remote in $(git branch -r | grep -v main | grep -v \>); do git branch --track "${remote#origin/}" "$remote"; done
        shell: bash

      - name: Install Helm
        id: helm
        uses: azure/setup-helm@29960d0f5f19214b88e1d9ba750a9914ab0f1a2f # v4.0.0

      - name: Update Values and Chart
        if: "${{ inputs.chart_version != '' }}"
        id: chart
        uses: fjogeleit/yaml-update-action@ada2af9b053b51b75f6d7d9d3eab45d1a5266766 # main
        with:
          commitChange: false
          changes: |
            {
              "${{ inputs.chart }}/values.yaml":
              {
                "image.repository": "${{ inputs.image_repository }}",
                "image.tag": "${{ inputs.image_tag }}",
                "image.sha": "${{ inputs.image_digest }}"
              },
              "${{ inputs.chart }}/Chart.yaml":
              {
                "version": "${{ inputs.chart_version }}",
                "appVersion": "${{ inputs.chart_version }}"
              }
            }

      - name: Use Node.js
        if: "${{ inputs.chart_version == '' }}"
        id: node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: "20.x"

      - name: Update Main Chart
        if: "${{ inputs.chart_version == '' }}"
        id: main_chart
        env:
          DHURL: ${{ inputs.dhurl }}
          DHUSER: ${{ secrets.DHUSER }}
          DHPASS: ${{ secrets.DHPASS }}
        run: |
          sleep 5m
          yarn install
          git pull
          node main.js
          git add "${{ inputs.chart }}/Chart.yaml"
          git commit -m "Generate Main Chart"
          git push
          # Add a check for deploy.json existence
          if [ -f "deploy.json" ]; then
            pip install ortelius-cli
            dh deploy --logdeployment --deploydata deploy.json --appautoinc N
          else
            echo "deploy.json does not exist. Skipping dh command."
          fi
        shell: bash

      - name: Run chart-releaser
        id: cr
        run: |
          set -x

          gpg_keyring_base64="${{ secrets.GPG_KEYRING_BASE64 }}"
          gpg_passphrase="${{ secrets.gpg_passphrase }}"
          gpg_keyring="/tmp/secring.gpg"
          gpg_passphrase_file="/tmp/passphrase"

          # Create keyring and passphrase file
          echo "${gpg_keyring_base64}" | base64 -d > "${gpg_keyring}"
          echo "${gpg_passphrase}" > "${gpg_passphrase_file}"

          set +o pipefail +e
          # Loop until all of the dependencies are downloaded
          while ! helm dep update "${{ inputs.chart }}"
          do
            sleep 1m
          done
          set -o pipefail -e

          # Helm Package with signing
          tag=$(basename "$(helm package "${{ inputs.chart }}" -u --key "${{ secrets.gpg_key }}" --sign --keyring "${gpg_keyring}" --passphrase-file "${gpg_passphrase_file}" | cut -d: -f2)" .tgz)
          echo "Created ${tag}"

          # Clean up GPG and intermediate tgz files
          rm -rf "${gpg_keyring}" "${gpg_passphrase_file}" "${{ inputs.chart }}/charts"

          # Rename the signing .prov to .asc for OpenSSF Scorecard
          find . -maxdepth 1 -type f -name '*.prov' -exec sh -c 'cp "$1" "$(basename "$1" .prov).asc"' _ {} \;

          # Remove existing tags and releases
          gh release delete "${tag}" --cleanup-tag -y || true

          # Create a new commit and release
          git tag -f "${tag}"
          git push -f --tags
          release=$(gh release create "${tag}" "${tag}".* --title "${tag}" --notes "${{ inputs.notes }}" | sed 's#/tag/#/download/#')

          # Copy the release .tgz for indexing
          mkdir -p /tmp/charts
          mv "${tag}.tgz" /tmp/charts
          mv "${tag}.tgz.asc" /tmp/charts
          mv "${tag}.tgz.prov" /tmp/charts

          # Get the existing index.yaml for merging
          git show gh-pages:index.yaml > /tmp/index.yaml

          # Index the new release into the index.yaml
          helm repo index /tmp/charts --merge /tmp/index.yaml --url "${release}"

          # Save the new index.yaml
          mv /tmp/charts/index.yaml /tmp

          # Cleanup any working files and switch to the gh-pages branch
          git reset --hard
          git clean -x -f -d
          git checkout gh-pages
          git pull

          # Put the new index.yaml in place and commit/push it
          mv /tmp/index.yaml index.yaml
          git add index.yaml
          git commit -m "Generate Charts ${tag}"
          git push -f
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.gh_token }}

      - name: Trigger Rebuild of ortelius/scec-charts
        if: "${{ contains(github.repository, 'scec-') && inputs.chart_version == '' }}"
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3.0.0
        with:
          event-type: generate-main-chart
          repository: ortelius/scec-charts
          token: ${{ secrets.gh_token }}

      - name: Trigger Rebuild of ortelius/ortelius-charts
        if: "${{ !(contains(github.repository, 'scec-')) && inputs.chart_version == '' }}"
        uses: peter-evans/repository-dispatch@ff45666b9427631e3450c54a1bcbee4d9ff4d7c0 # v3.0.0
        with:
          event-type: generate-main-chart
          repository: ortelius/ortelius-charts
          token: ${{ secrets.gh_token }}
